{"version":3,"sources":["webpack:///./src/modules/DM000002.js"],"names":["DM000002","canvas","SOL","SVG","p","g","items","callback","type","src","circleBear","circleLion","circleMonkey","rectCow","rectGiraffe","rectZebra","triangleDeer","triangleFox","triangleMouse","position","testG","test","center","rows","columns","size","itemG","addClass","itemLength","length","remainNum","addItem","getRandomArrayElement","point","getPointInMatrixForm","startPoint","x","cx","y","cy","gap","width","height","shapes","shuffle","concat","map","el","i","imageG","loadDragImage","loadImage","key","getBBox","w","h","use","transform","appendTo","rect","attr","stroke","opacity","after","select","data","index","D1drag","dragItem","startCallback","dragStartCallback","moveCallback","dragMoveCallback","endCallback","dragEndCallback","self","append","forEach","pointerEvents","userIndex","dropIndex","getUserDropElementIndex","dropElement","swapItem","answerCheck","answer","answerAnimHandler","moveAnimate","bool","removeIndex","removeItem","downItem","emptyIndex","fillItem","Promise","all","D1Animate","blink","interval","duration","element","includes","remove","columnCheckArr","getTransposeArray","get2dimArray","totalIndex","remainIndex","animate","el2","removed","count","reduce","c","j","moveIndex","push","bind","window","mina","bounce","filter","getNextArrayElement","arr","nextEmptyIndex","next","value","sort","a","b","first","second","firstIndex","secondIndex","elements","animates","rowRemoveIndex","rowCheck","columRemoveIndex","columnCheck","totalRemoveIndex","getUniquArray","Boolean","removeTargetIndex","el3","currentType","some","sameNum","userDragItem","targetIndex","shapeBBox","Snap","path","isPointInsideBBox","start"],"mappings":"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","file":"static/js/6.8a4decbd.chunk.js","sourcesContent":["import { loadImage } from 'sol-common';\nimport Snap from 'sol-common/snap';\nimport { SOL } from 'sol-common/util';\nimport { get2dimArray, getPointInMatrixForm, getRandomArrayElement, getTransposeArray, getUniquArray, shuffle } from '../utils/util';\nimport D1drag from '../components/D1drag';\nimport D1Animate from '../utils/D1Animate';\n\nimport circleBear from '../assets/testImages/circle_bear.svg';\nimport circleLion from '../assets/testImages/circle_lion.svg';\nimport circleMonkey from '../assets/testImages/circle_monkey.svg';\n\nimport rectCow from '../assets/testImages/rect_cow.svg';\nimport rectGiraffe from '../assets/testImages/rect_giraffe.svg';\nimport rectZebra from '../assets/testImages/rect_zebra.svg';\n\nimport triangleDeer from '../assets/testImages/triangle_deer.svg';\nimport triangleFox from '../assets/testImages/triangle_fox.svg';\nimport triangleMouse from '../assets/testImages/triangle_mouse.svg';\n\nexport default function DM000002({ canvas = SOL.SVG, ...p }) {\n    const g = canvas;\n    const callback = p.callback;\n\n    const items = [\n        { type: 'circle1', src: circleBear },\n        { type: 'circle2', src: circleLion },\n        { type: 'circle3', src: circleMonkey },\n        { type: 'rect1', src: rectCow },\n        { type: 'rect2', src: rectGiraffe },\n        { type: 'rect3', src: rectZebra },\n        { type: 'triangle1', src: triangleDeer },\n        { type: 'triangle2', src: triangleFox },\n        { type: 'triangle3', src: triangleMouse }\n    ];\n    const position = p.position;\n\n    const testG = g.g();\n\n    test({\n        g: testG,\n        items,\n        position\n    });\n}\n\nconst test = ({ g, items, position }) => {\n    const { center, rows, columns, size } = position;\n    const itemG = g.g().addClass('D1-item-group');\n    const itemLength = items.length;\n    const totalNum = rows * columns;\n    const remainNum = totalNum - itemLength;\n    const addItem = getRandomArrayElement(items, remainNum);\n    const point = getPointInMatrixForm({\n        startPoint: { x: center.cx, y: center.cy },\n        rows,\n        columns,\n        gap: { x: size.width, y: size.height },\n        center: true\n    });\n    const sameNum = 3;\n\n    const shapes = shuffle(items.concat(addItem)).map((el, i) => {\n        const { type, src } = el;\n        const { x, y } = point[i];\n        const imageG = itemG.g();\n\n        const loadDragImage = loadImage({ src, key: `${type}-${i}`, type: 'svg' });\n        const { w, h } = loadDragImage.getBBox();\n        loadDragImage\n            .use()\n            .transform('t' + [x - w / 2, y - h / 2] + 's0.7')\n            .appendTo(imageG);\n\n        imageG\n            .rect(x - size.width / 2, y - size.height / 2, size.width, size.height)\n            .attr({ stroke: 'blue', opacity: '0' })\n            .after(imageG.select('use'));\n\n        imageG.data('data', { type, index: i });\n\n        return D1drag({\n            dragItem: imageG,\n            startCallback: () => dragStartCallback(imageG),\n            moveCallback: () => dragMoveCallback(imageG),\n            endCallback: () => dragEndCallback(imageG)\n        });\n    });\n\n    const dragStartCallback = self => {\n        itemG.append(self);\n    };\n\n    const dragMoveCallback = self => {\n        // const dropIndex = getUserDropElementIndex(self);\n    };\n\n    const dragEndCallback = async self => {\n        shapes.forEach(el => el.attr({ pointerEvents: 'none' }));\n        const userIndex = self.data('data').index;\n        const dropIndex = getUserDropElementIndex(self);\n\n        if (typeof dropIndex === 'number') {\n            const dropElement = shapes[dropIndex];\n\n            await swapItem(self, dropElement);\n            const { answer } = answerCheck();\n\n            if (answer) await answerAnimHandler();\n            else await swapItem(dropElement, self);\n        } else {\n            const { x, y } = point[userIndex];\n            await self.moveAnimate({ x: x - size.width / 2, y: y - size.height / 2 });\n        }\n\n        shapes.forEach(el => el.attr({ pointerEvents: 'auto' }));\n    };\n\n    const answerAnimHandler = async (bool = true) => {\n        while (bool) {\n            const { answer, removeIndex } = answerCheck();\n            if (answer) {\n                await removeItem(removeIndex);\n                const emptyIndex = await downItem(removeIndex);\n                await fillItem(emptyIndex);\n            } else break;\n        }\n    };\n\n    const removeItem = async index => {\n        await Promise.all(index.map(el => D1Animate.blink({ interval: 0.5, duration: 500, element: shapes[el], opacity: 1 })));\n        await Promise.all(index.map(el => D1Animate.blink({ interval: 0.5, duration: 500, element: shapes[el], opacity: 1 })));\n        await Promise.all(index.map(el => D1Animate.blink({ interval: 1, duration: 250, element: shapes[el], opacity: 1 })));\n    };\n\n    const downItem = async index => {\n        shapes.forEach((el, i) => index.includes(i) && el.remove());\n        const columnCheckArr = getTransposeArray(get2dimArray(shapes, columns));\n        const totalIndex = shapes.map((el, i) => i);\n        const remainIndex = [];\n        const animate = [];\n        columnCheckArr.forEach(el => {\n            el.forEach((el2, i) => {\n                const { index } = el2.data('data');\n                if (!el2.removed) {\n                    const count = el.reduce((p, c, j) => {\n                        if (i < j && c.removed) return (p += 1);\n                        else return p;\n                    }, 0);\n                    if (count > 0) {\n                        const moveIndex = index + columns * count;\n                        const { x, y } = point[moveIndex];\n                        el2.data('data').index = moveIndex;\n                        animate.push(el2.moveAnimate.bind(null, { x: x - size.width / 2, y: y - size.height / 2 }, window.mina.bounce, true));\n                        remainIndex.push(moveIndex);\n                    } else {\n                        remainIndex.push(index);\n                    }\n                }\n            });\n        });\n        const emptyIndex = totalIndex.filter(el => !remainIndex.includes(el));\n\n        await Promise.all(animate.map(el => el()));\n        return emptyIndex;\n    };\n\n    const fillItem = async index => {\n        const nextEmptyIndex = getNextArrayElement(index);\n        const animate = [];\n        shapes.forEach((el, i) => {\n            if (el.removed) {\n                const index = nextEmptyIndex.next().value;\n                const { type, src } = shuffle(getRandomArrayElement(items, 5))[0];\n                const { x, y } = point[index];\n                const imageG = itemG.g();\n                const loadDragImage = loadImage({ src, key: `${type}-${i}`, type: 'svg' });\n                const { w, h } = loadDragImage.getBBox();\n                loadDragImage\n                    .use()\n                    .transform('t' + [x - w / 2, -h / 2] + 's0.7')\n                    .appendTo(imageG);\n\n                imageG\n                    .rect(x - size.width / 2, -size.height / 2, size.width, size.height)\n                    .attr({ stroke: 'blue', opacity: '0' })\n                    .after(imageG.select('use'));\n\n                imageG.data('data', { type, index });\n\n                shapes[i] = D1drag({\n                    dragItem: imageG,\n                    startCallback: () => dragStartCallback(imageG),\n                    moveCallback: () => dragMoveCallback(imageG),\n                    endCallback: () => dragEndCallback(imageG)\n                });\n\n                animate[i] = shapes[i].moveAnimate.bind(null, { x: x - size.width / 2, y: y - size.height / 2 }, window.mina.bounce, true);\n            }\n        });\n        shapes.sort((a, b) => a.data('data').index - b.data('data').index);\n\n        await Promise.all(animate.map(el => el()));\n\n        function* getNextArrayElement(arr) {\n            for (let index = 0; index < arr.length; index++) yield arr[index];\n        }\n    };\n\n    const swapItem = async (first, second) => {\n        const firstIndex = first.data('data').index;\n        const secondIndex = second.data('data').index;\n        const indexes = [secondIndex, firstIndex];\n        const elements = [first, second];\n        const animates = indexes.map((el, i) => {\n            const { x, y } = point[el];\n            return elements[i].moveAnimate.bind(null, { x: x - size.width / 2, y: y - size.height / 2 });\n        });\n\n        await Promise.all(animates.map(el => el()));\n\n        first.data('data').index = secondIndex;\n        second.data('data').index = firstIndex;\n        shapes.sort((a, b) => a.data('data').index - b.data('data').index);\n    };\n\n    const answerCheck = () => {\n        const rowRemoveIndex = rowCheck();\n        const columRemoveIndex = columnCheck();\n        const totalRemoveIndex = getUniquArray([...rowRemoveIndex, ...columRemoveIndex]);\n        return { answer: Boolean(totalRemoveIndex.length > 0), removeIndex: totalRemoveIndex };\n    };\n\n    const rowCheck = () => {\n        let removeTargetIndex = [];\n        const rowCheckArr = get2dimArray(shapes, columns);\n\n        const rowResult = rowCheckArr.map(el3 => {\n            const removeIndex = [];\n            el3.forEach((el, i) => {\n                const currentType = el.data('data').type;\n                removeIndex[i] = [];\n                el3.some((el2, j) => {\n                    if (i > j) return false;\n                    if (currentType === el2.data('data').type) {\n                        removeIndex[i].push(el2.data('data').index);\n                        return false;\n                    } else return true;\n                });\n            });\n            return removeIndex;\n        });\n\n        rowResult.forEach(el =>\n            el.forEach(el2 => {\n                if (el2.length > sameNum - 1) removeTargetIndex = [...removeTargetIndex, ...el2];\n            })\n        );\n\n        return getUniquArray(removeTargetIndex);\n    };\n\n    const columnCheck = () => {\n        let removeTargetIndex = [];\n        const columnCheckArr = getTransposeArray(get2dimArray(shapes, columns));\n        const columnResult = columnCheckArr.map(el3 => {\n            const removeIndex = [];\n            el3.forEach((el, i) => {\n                const currentType = el.data('data').type;\n                removeIndex[i] = [];\n                el3.some((el2, j) => {\n                    if (i > j) return false;\n                    if (currentType === el2.data('data').type) {\n                        removeIndex[i].push(el2.data('data').index);\n                        return false;\n                    } else return true;\n                });\n            });\n            return removeIndex;\n        });\n\n        columnResult.forEach(el =>\n            el.forEach(el2 => {\n                if (el2.length > sameNum - 1) removeTargetIndex = [...removeTargetIndex, ...el2];\n            })\n        );\n        return getUniquArray(removeTargetIndex);\n    };\n\n    const getUserDropElementIndex = userDragItem => {\n        const { cx, cy } = userDragItem.getBBox();\n        const data = userDragItem.data('data');\n        let targetIndex;\n        shapes.some((el, i) => {\n            const shapeBBox = el.getBBox();\n            if (Snap.path.isPointInsideBBox(shapeBBox, cx, cy) && data.index !== i) {\n                targetIndex = i;\n                return true;\n            }\n            return false;\n        });\n        return targetIndex;\n    };\n\n    const start = async () => {\n        const { answer } = answerCheck();\n        answerAnimHandler(answer);\n    };\n\n    start();\n};\n"],"sourceRoot":""}